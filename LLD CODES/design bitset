class Bitset {
public:
    private boolean [] bits;
    private boolean [] flipped;
    private int sz,cnt;
    
    Bitset(int size) {
        sz=size;
        bits=new boolean [size];
        flipped=new boolean[size];
        Arrays.fill(flipped,true);
    }
    
    void fix(int idx) {
        if(!bits[idx]){
            bits[idx]^=true;
         flipped[idx]^=true;
            cnt++;
        }
    }
    
    void unfix(int idx) {
           if(bits[idx]){
            bits[idx]^=true;
            flipped[idx]^=true;
            cnt--;
    }
    
    void flip() {
        boolean [] temp=bits;
        bits=flipped;
        flipped=temp;
        cnt=sz-cnt;
    }
    
    bool all() {
        return cnt==sz;
    }
    
    bool one() {
        return cnt>0;
    }
    
    int count() {
        return cnt;
    }
    string toString() {
        StringBuilder sb=new StringBuilder();
        for(boolean b:bits){
            sb.append(b?'1':'0');
            
        }
        return sb.toString();
    }
};

/**
 * Your Bitset object will be instantiated and called as such:
 * Bitset* obj = new Bitset(size);
 * obj->fix(idx);
 * obj->unfix(idx);
 * obj->flip();
 * bool param_4 = obj->all();
 * bool param_5 = obj->one();
 * int param_6 = obj->count();
 * string param_7 = obj->toString();
 */
